/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  DebugTools,
  DebugToolsInterface,
} from "../../contracts/DebugTools";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "logData",
        type: "string",
      },
    ],
    name: "consoleLog",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "logData",
        type: "bytes",
      },
    ],
    name: "log0",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "topic1",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "logData",
        type: "bytes",
      },
    ],
    name: "log1",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "topic1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "topic2",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "logData",
        type: "bytes",
      },
    ],
    name: "log2",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "topic1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "topic2",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "topic3",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "logData",
        type: "bytes",
      },
    ],
    name: "log3",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "topic1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "topic2",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "topic3",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "topic4",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "logData",
        type: "bytes",
      },
    ],
    name: "log4",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506104a58061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100615760003560e01c80627f832d146100665780630aa781ed1461007b5780630f13f10b1461008e5780636494876f146100a15780637ca0845b146100b4578063bf2b135b146100c7575b600080fd5b610079610074366004610246565b6100da565b005b610079610089366004610296565b6100e8565b61007961009c3660046102dd565b6100f4565b6100796100af36600461032e565b610100565b6100796100c2366004610388565b610110565b6100796100d53660046103bd565b61011a565b8183825160208401a2505050565b81815160208301a15050565b6100fd8161012c565b50565b818385835160208501a350505050565b805160208201a050565b81838587845160208601a45050505050565b6100fd816040516024016101409190610421565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b1790526100fd8160006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b634e487b7160e01b600052604160045260246000fd5b60008067ffffffffffffffff8411156101c0576101c061018f565b50604051601f19601f85018116603f0116810181811067ffffffffffffffff821117156101ef576101ef61018f565b60405283815290508082840185101561020757600080fd5b83836020830137600060208583010152509392505050565b600082601f83011261023057600080fd5b61023f838335602085016101a5565b9392505050565b60008060006060848603121561025b57600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561028057600080fd5b61028c8682870161021f565b9150509250925092565b600080604083850312156102a957600080fd5b82359150602083013567ffffffffffffffff8111156102c757600080fd5b6102d38582860161021f565b9150509250929050565b6000602082840312156102ef57600080fd5b813567ffffffffffffffff81111561030657600080fd5b8201601f8101841361031757600080fd5b610326848235602084016101a5565b949350505050565b6000806000806080858703121561034457600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff81111561037057600080fd5b61037c8782880161021f565b91505092959194509250565b60006020828403121561039a57600080fd5b813567ffffffffffffffff8111156103b157600080fd5b6103268482850161021f565b600080600080600060a086880312156103d557600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff81111561040857600080fd5b6104148882890161021f565b9150509295509295909350565b602081526000825180602084015260005b8181101561044f5760208186018101516040868401015201610432565b506000604082850101526040601f19601f8301168401019150509291505056fea2646970667358221220761481349a1c7bc013df56d8c4dc3bd3491b9f4482e06e7c6ca360e8a9c4b7dd64736f6c634300081b0033";

type DebugToolsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DebugToolsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DebugTools__factory extends ContractFactory {
  constructor(...args: DebugToolsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      DebugTools & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DebugTools__factory {
    return super.connect(runner) as DebugTools__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DebugToolsInterface {
    return new Interface(_abi) as DebugToolsInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): DebugTools {
    return new Contract(address, _abi, runner) as unknown as DebugTools;
  }
}
