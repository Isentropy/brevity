/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  NoncesBytes32,
  NoncesBytes32Interface,
} from "../../contracts/NoncesBytes32";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "currentNonce",
        type: "uint256",
      },
    ],
    name: "InvalidNonce",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "owner",
        type: "bytes32",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class NoncesBytes32__factory {
  static readonly abi = _abi;
  static createInterface(): NoncesBytes32Interface {
    return new Interface(_abi) as NoncesBytes32Interface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): NoncesBytes32 {
    return new Contract(address, _abi, runner) as unknown as NoncesBytes32;
  }
}
