/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { Test, TestInterface } from "../../../contracts/test/Test";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "foo",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "exactInTokenA",
        type: "uint256",
      },
      {
        internalType: "contract MintableERC20",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "swap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506102788061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632fbebd381461003b5780636d069a6714610060575b600080fd5b61004e610049366004610181565b610073565b60405190815260200160405180910390f35b61004e61006e3660046101b2565b610086565b60006100808260026101f4565b92915050565b6040516323b872dd60e01b8152336004820152306024820152604481018390526000906001600160a01b038516906323b872dd906064016020604051808303816000875af11580156100dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101009190610219565b506001600160a01b0382166340c10f193361011c8660026101f4565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561016257600080fd5b505af1158015610176573d6000803e3d6000fd5b505050509392505050565b60006020828403121561019357600080fd5b5035919050565b6001600160a01b03811681146101af57600080fd5b50565b6000806000606084860312156101c757600080fd5b83356101d28161019a565b92506020840135915060408401356101e98161019a565b809150509250925092565b808202811582820484141761008057634e487b7160e01b600052601160045260246000fd5b60006020828403121561022b57600080fd5b8151801515811461023b57600080fd5b939250505056fea26469706673582212202e551c44736f63609a5992edfad3742de166c5f7b0ae041d2d60247060e2b39e64736f6c634300081b0033";

type TestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Test__factory extends ContractFactory {
  constructor(...args: TestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Test & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Test__factory {
    return super.connect(runner) as Test__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestInterface {
    return new Interface(_abi) as TestInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Test {
    return new Contract(address, _abi, runner) as unknown as Test;
  }
}
