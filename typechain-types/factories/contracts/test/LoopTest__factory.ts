/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  LoopTest,
  LoopTestInterface,
} from "../../../contracts/test/LoopTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "n",
        type: "int256",
      },
    ],
    name: "loop",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060a180601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063d61a2b6314602d575b600080fd5b603c60383660046053565b603e565b005b60005b81811215604f576001016041565b5050565b600060208284031215606457600080fd5b503591905056fea2646970667358221220f823cf0a5351bbfe9d60f216349f5c285b78c0e55c744628f7f9a441cb897db064736f6c634300081b0033";

type LoopTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LoopTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LoopTest__factory extends ContractFactory {
  constructor(...args: LoopTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      LoopTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): LoopTest__factory {
    return super.connect(runner) as LoopTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LoopTestInterface {
    return new Interface(_abi) as LoopTestInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): LoopTest {
    return new Contract(address, _abi, runner) as unknown as LoopTest;
  }
}
