/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type InstructionStruct = { opcode: BigNumberish; args: BytesLike[] };

export type InstructionStructOutput = [opcode: bigint, args: string[]] & {
  opcode: bigint;
  args: string[];
};

export type QuantityStruct = { quantityType: BigNumberish; args: BytesLike[] };

export type QuantityStructOutput = [quantityType: bigint, args: string[]] & {
  quantityType: bigint;
  args: string[];
};

export type ProgramStruct = {
  config: BigNumberish;
  instructions: InstructionStruct[];
  quantities: QuantityStruct[];
};

export type ProgramStructOutput = [
  config: bigint,
  instructions: InstructionStructOutput[],
  quantities: QuantityStructOutput[]
] & {
  config: bigint;
  instructions: InstructionStructOutput[];
  quantities: QuantityStructOutput[];
};

export interface CloneFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cloneDeterministic"
      | "cloneIfNeededThenRun"
      | "predictDeterministicAddress"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "NewClone"): EventFragment;

  encodeFunctionData(
    functionFragment: "cloneDeterministic",
    values: [AddressLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cloneIfNeededThenRun",
    values: [
      AddressLike,
      BytesLike,
      AddressLike,
      ProgramStruct,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "predictDeterministicAddress",
    values: [AddressLike, BytesLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "cloneDeterministic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cloneIfNeededThenRun",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictDeterministicAddress",
    data: BytesLike
  ): Result;
}

export namespace NewCloneEvent {
  export type InputTuple = [
    owner: AddressLike,
    cloneAddress: AddressLike,
    implementation: AddressLike
  ];
  export type OutputTuple = [
    owner: string,
    cloneAddress: string,
    implementation: string
  ];
  export interface OutputObject {
    owner: string;
    cloneAddress: string;
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CloneFactory extends BaseContract {
  connect(runner?: ContractRunner | null): CloneFactory;
  waitForDeployment(): Promise<this>;

  interface: CloneFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cloneDeterministic: TypedContractMethod<
    [implementation: AddressLike, salt: BytesLike, owner: AddressLike],
    [string],
    "nonpayable"
  >;

  cloneIfNeededThenRun: TypedContractMethod<
    [
      implementation: AddressLike,
      salt: BytesLike,
      owner: AddressLike,
      p: ProgramStruct,
      deadline: BigNumberish,
      sig: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  predictDeterministicAddress: TypedContractMethod<
    [implementation: AddressLike, salt: BytesLike, owner: AddressLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cloneDeterministic"
  ): TypedContractMethod<
    [implementation: AddressLike, salt: BytesLike, owner: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cloneIfNeededThenRun"
  ): TypedContractMethod<
    [
      implementation: AddressLike,
      salt: BytesLike,
      owner: AddressLike,
      p: ProgramStruct,
      deadline: BigNumberish,
      sig: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "predictDeterministicAddress"
  ): TypedContractMethod<
    [implementation: AddressLike, salt: BytesLike, owner: AddressLike],
    [string],
    "view"
  >;

  getEvent(
    key: "NewClone"
  ): TypedContractEvent<
    NewCloneEvent.InputTuple,
    NewCloneEvent.OutputTuple,
    NewCloneEvent.OutputObject
  >;

  filters: {
    "NewClone(address,address,address)": TypedContractEvent<
      NewCloneEvent.InputTuple,
      NewCloneEvent.OutputTuple,
      NewCloneEvent.OutputObject
    >;
    NewClone: TypedContractEvent<
      NewCloneEvent.InputTuple,
      NewCloneEvent.OutputTuple,
      NewCloneEvent.OutputObject
    >;
  };
}
