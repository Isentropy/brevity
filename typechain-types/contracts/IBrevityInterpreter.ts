/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type InstructionStruct = { opcode: BigNumberish; args: BytesLike[] };

export type InstructionStructOutput = [opcode: bigint, args: string[]] & {
  opcode: bigint;
  args: string[];
};

export type QuantityStruct = { quantityType: BigNumberish; args: BytesLike[] };

export type QuantityStructOutput = [quantityType: bigint, args: string[]] & {
  quantityType: bigint;
  args: string[];
};

export type ProgramStruct = {
  config: BigNumberish;
  instructions: InstructionStruct[];
  quantities: QuantityStruct[];
};

export type ProgramStructOutput = [
  config: bigint,
  instructions: InstructionStructOutput[],
  quantities: QuantityStructOutput[]
] & {
  config: bigint;
  instructions: InstructionStructOutput[];
  quantities: QuantityStructOutput[];
};

export interface IBrevityInterpreterInterface extends Interface {
  getFunction(nameOrSignature: "run" | "runMeta" | "version"): FunctionFragment;

  encodeFunctionData(functionFragment: "run", values: [ProgramStruct]): string;
  encodeFunctionData(
    functionFragment: "runMeta",
    values: [ProgramStruct, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "run", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "runMeta", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export interface IBrevityInterpreter extends BaseContract {
  connect(runner?: ContractRunner | null): IBrevityInterpreter;
  waitForDeployment(): Promise<this>;

  interface: IBrevityInterpreterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  run: TypedContractMethod<[p: ProgramStruct], [void], "payable">;

  runMeta: TypedContractMethod<
    [p: ProgramStruct, deadline: BigNumberish, sig: BytesLike],
    [void],
    "payable"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "run"
  ): TypedContractMethod<[p: ProgramStruct], [void], "payable">;
  getFunction(
    nameOrSignature: "runMeta"
  ): TypedContractMethod<
    [p: ProgramStruct, deadline: BigNumberish, sig: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
