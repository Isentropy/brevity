/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DebugToolsInterface extends Interface {
  getFunction(
    nameOrSignature: "consoleLog" | "log0" | "log1" | "log2" | "log3" | "log4"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "consoleLog", values: [string]): string;
  encodeFunctionData(functionFragment: "log0", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "log1",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "log2",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "log3",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "log4",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "consoleLog", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "log0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "log1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "log2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "log3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "log4", data: BytesLike): Result;
}

export interface DebugTools extends BaseContract {
  connect(runner?: ContractRunner | null): DebugTools;
  waitForDeployment(): Promise<this>;

  interface: DebugToolsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  consoleLog: TypedContractMethod<[logData: string], [void], "view">;

  log0: TypedContractMethod<[logData: BytesLike], [void], "nonpayable">;

  log1: TypedContractMethod<
    [topic1: BigNumberish, logData: BytesLike],
    [void],
    "nonpayable"
  >;

  log2: TypedContractMethod<
    [topic1: BigNumberish, topic2: BigNumberish, logData: BytesLike],
    [void],
    "nonpayable"
  >;

  log3: TypedContractMethod<
    [
      topic1: BigNumberish,
      topic2: BigNumberish,
      topic3: BigNumberish,
      logData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  log4: TypedContractMethod<
    [
      topic1: BigNumberish,
      topic2: BigNumberish,
      topic3: BigNumberish,
      topic4: BigNumberish,
      logData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "consoleLog"
  ): TypedContractMethod<[logData: string], [void], "view">;
  getFunction(
    nameOrSignature: "log0"
  ): TypedContractMethod<[logData: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "log1"
  ): TypedContractMethod<
    [topic1: BigNumberish, logData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "log2"
  ): TypedContractMethod<
    [topic1: BigNumberish, topic2: BigNumberish, logData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "log3"
  ): TypedContractMethod<
    [
      topic1: BigNumberish,
      topic2: BigNumberish,
      topic3: BigNumberish,
      logData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "log4"
  ): TypedContractMethod<
    [
      topic1: BigNumberish,
      topic2: BigNumberish,
      topic3: BigNumberish,
      topic4: BigNumberish,
      logData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
